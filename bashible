#!/bin/bash

# bashible
# (c) Jan Molic 2015
# https://github.com/mig1984/bashible


### INTERNAL FUNCTIONS ####

help() {
  echo "usage: bashible BLEBOOK.ble"
  echo
  echo "see also: https://github.com/mig1984/bashible"
  echo
  exit 1
}

# searches an array for an element; used internally
containsElement() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

# export preserved variables
preserveEnvironment() {
  IFS=':'; for i in $_PRESERVED; do
     if [ -n "$i" ]; then
        export "$i"
     fi
  done
  IFS=$' \t\n'
}

# build _ENVREPEAT array
buildENVREPEAT() {
  _ENVREPEAT=()
  _ENVREPEAT[0]="env"
  local cnt=1
  IFS=':'; for i in $_PRESERVED; do
     IFS=$' \t\n'
     if [ -n "$i" ]; then
        _ENVREPEAT["$cnt"]="$i=`eval echo \\$$i`"
        let cnt=cnt+1
     fi
  done
  #echo "${_ENVREPEAT[@]}"
}

print_start() {
    echo -e "\n\033[1;37;45m ${_NAV} \033[1;37;44m START \033[0m" >&2
}

print_block() {
    echo -e "\n\033[1;37;45m ${_NAV} \033[1;37;44m $* \033[0m" >&2
}

print_finish() {
    echo -e "\n\033[1;37;45m ${_NAV} \033[1;37;44m FINISH \033[0m" >&2
}

print_task() {
    echo -e "\033[37m - $* \033[0m" >&2
}

print_error() {
  echo -e "   \033[31m($*)\033[0m" >&2
}

print_warn() {
  echo -e "   \033[31m($*)\033[0m" >&2
}

print_info() {
  echo -e "   \033[32m($*)\033[0m" >&2
}

### CORE FUNCTIONS ###

# represents a block; always chdirs to the base_dir (default = current directory)
@() {
   _BLOCKS_STARTED=1
   _SKIP=0
   cd "${_BASE_DIR}" || fail "can't chdir to base dir '${_BASE_DIR}'"
   print_block $*
}

# represents a task; if the task fails, the bashible script is stopped
# if the block has been skipped, does nothing
-() {
   if [ "${_SKIP}" != 1 ]; then
     print_task $*
     "$@" || fail "'$@' failed (in `pwd`)";
   fi
}

already() {
  if [ "${_BLOCKS_STARTED}" = 0 ]; then
     print_warn "already, stopping here"
     print_finish
     exit
  else
     print_info "already, skipping following tasks"
     _SKIP=1
  fi
}

# the same as skip_if, just a different message
already_if() {
  "$@" && already || return 0
}

# run following command as an user
as() {
   local user=$1; shift
   # can't be -i (login shell) otherwise it would chdir to homedir
   # and relative paths would behave unexpectedly
   buildENVREPEAT
   sudo -u "$user" "${_ENVREPEAT[@]}" "${_BASHIBLE}" -- "$@" || fail "as: sudo command failed (in `pwd`)";
}

# set base dir (will be chdired to it on each @ block)
base_dir() {
  _BASE_DIR=`readlink -e "$1"` # get absolute path
  if [ -z "${_BASE_DIR}" ]; then
    fail "base_dir: readlink -e '$1' failed"
  fi
  cd "${_BASE_DIR}" || fail "can't chdir to base dir '${_BASE_DIR}'"
}


# use to call a bashible "playbook" instead of sourcing it
# does it's job only once unless already called
# call './foo.ble'
call() { 
  local path=`readlink -e "$1"` # get absolute path
  if [ -z "$path" ]; then
    fail "is the path of call '$1' correct at that place? (got empty path on readlink)"
  fi
  if ! grep -q "$path" "${_CALLED}"; then
    force_call "$@"
  fi
}

evaluate() {
  eval "$@" || { print_error "evaluate: command '$@' has failed"; return 1; }
}

export_var() {
 if set_var "$@"; then
   local name=$1; shift
   eval "
     _PRESERVED=\"\${_PRESERVED}\$$name:\"
     export $name
   "
 else
   return 1
 fi
}

fail() {
   echo -e "\033[1;37;41m ${_NAV}: $*, exiting \033[0m" >&2
   exit 1
}

# use to call a bashible "playbook" instead of sourcing it
# force_call './foo.ble'
force_call() {
  local path=`readlink -e "$1"` # get absolute path
  if [ -z "$path" ]; then
    fail "is the path of call '$1' correct at that place? (got empty path on readlink)"
  fi
  echo $path >> "${_CALLED}" || fail "can't write to _CALLED file (${_CALLED})"
  (
    _NAV="${_NAV}/`basename $path | sed "s/\.ble\$//" `"
    _BASE_DIR=`dirname "$path"`
    _ORIG_BASE_DIR="${_BASE_DIR}"
    _BLOCKS_STARTED=0
    _SKIP=0
    let _LEVEL=_LEVEL+1
    print_start
    cd "${_BASE_DIR}" || fail "can't enter base dir '${_BASE_DIR}'"
    shift # shift the script name, pass other args as $1, $2, etc.
    source ./`basename "$path"` || fail "there's an error in the playbook"
    print_finish
  ) || exit 1
}

import() {
   local path=`readlink -e "$1"` # get absolute path
   if ! echo "${_IMPORTED}" | grep ":$path:"; then
      _IMPORTED="${_IMPORTED}$path:"
      source "$path"
   fi
}


i_am_child() {
  [ "${_LEVEL}" -gt 1 ]
}

may_fail() {
  "$@"
  return 0
}

nonempty() {
  local buf
  eval "
    buf=\"\`  \"\$@\"  \`\"
  "
  if [ $? != 0 ]; then
     echo "$buf"
     print_error "nonempty: command '$@' has failed";
     return 1
  fi
  test -n "$buf" || { print_error "nonempty: got empty result while executing '$@'"; return 1; }
  echo $buf
}

# opposite to only_on
not_on() {
   if containsElement "${_HOSTNAME}" "$@"; then
      if [ "${_BLOCKS_STARTED}" = 0 ]; then
         print_warn "skipping all tasks here on ${_HOSTNAME}"
         stop
      else
         print_warn "not on ${_HOSTNAME}, skipping"
         _SKIP=1
      fi
   fi
}

not() {
  "$@" && return 1 || return 0
}

notify_call() {
  readlink -e "$1" >> "${_NOTIFY}" || fail "can't write to _NOTIFY file (${_NOTIFY})"
}

# skip next tasks if the current hostname is not in defined
# if called before all blocks, can skip all of them
only_on() {
   if ! containsElement "${_HOSTNAME}" "$@"; then
      if [ "${_BLOCKS_STARTED}" = 0 ]; then
         print_warn "skipping all tasks here on ${_HOSTNAME}"
         stop
      else
         print_warn "not on ${_HOSTNAME}, skipping"
         _SKIP=1
      fi
   fi
}

quiet() {
   "$@" >/dev/null 2>&1
}

reset_base_dir() {
  _BASE_DIR="${_ORIG_BASE_DIR}"
}

set_var() {
 local name=$1; shift
 local value;
 if [ -n "$*" ]; then
   value=`  "$@"  `
   if [ $? != 0 ]; then
     print_error "set_var: can't set, the command failed"
     return 1
   fi
   print_info "$name=$value"
   eval "$name=\$value"
 fi
}

skip() {
   if [ "${_BLOCKS_STARTED}" = 0 ]; then
     print_info "skipping all tasks of the blebook"
     exit
   else
      print_info "skipping following tasks"
     _SKIP=1
   fi
}

skip_if() {
  "$@" && skip || return 0
}

stop() {
  print_info "stopping execution of the blebook"
  print_finish
  exit 0
}

stop_all() {
  print_info "stopping execution of the blebook and all parent blebooks"
  print_finish
  exit 1
}

stop_all_if() {
  "$@" && stop_all || return 0
}

stop_if() {
  "$@" && stop || return 0
}

# skip next tasks if the tag is not in required tags (passed as TAGS env variable)
tags() {
   local ary=($TAGS);
   [ "${#ary[@]}" -eq 0 ] && return  # no tags given, continue normally

   for tag in $@; do
     if containsElement "$tag" "${ary[@]}"; then
       return 0
     fi
   done

   print_warn "does not match tags"
   skip
}


when() {
   if eval "$1"; then
      shift
      "$@"
   fi
}

unless() {
   if ! eval "$1"; then
      shift
      "$@"
   fi
}


### USEFUL HELPERS ###

# write contents to an existing file
# fails if the file is not empty and it's contents differs
set_contents() {
   local contents="$1"
   local path="$2"
   [ ! -w "$path" ] && { print_error "set_contents: file '$path' is not writable or doesn't exist"; return 1; }
   local current="` cat "$path" `"
   [ $? != 0 ] && { print_error "set_contents: can't read file '$path'"; return 1; }
   [ -s "$path" -a "$contents" = "$current" ] && return 0
   echo "$contents" > "$path"
}

# write contents to an existing file
# fails if the file is not empty and it's contents differs
set_contents_safe() {
   local contents="$1"
   local path="$2"
   [ ! -w "$path" ] && { print_error "set_contents_safe: file '$path' is not writable or doesn't exist"; return 1; }
   local current="` cat "$path" `"
   [ $? != 0 ] && { print_error "set_contents_safe: can't read file '$path'"; return 1; }
   [ -s "$path" -a "$contents" != "$current" ] && { print_error "set_contents_safe: file '$path' already contains something else"; return 1; }
   echo "$contents" > "$path"
}

add_line() {
   local line="$1"
   local path="$2"
   quiet head -n 1 "$path" || { print_error "add_line: can't read file '$path'"; return 1; }
   if ! quiet grep -F "$line" "$path"; then
     echo "$line" >> "$path" || { print_error "add_line: can't write to file '$path'"; return 1; }
   else
     print_info "already"
   fi
}

append_line() {
   local line="$1"
   local path="$2"
   quiet tail -n 1 "$path" || { print_error "append_line: can't read file '$path'"; return 1; }
   if [ "` tail -n 1 "$path" `" != "$line" ]; then
     echo "$line" >> "$path" || { print_error "append_line: can't write to file '$path'"; return 1; }
   else
     print_info "already"
   fi
}

comment_line_matching() {
   local match="$1"
   local path="$2"
   [ ! -f "$path" ] && { print_error "comment_line_matching: file '$path' not found"; return 1; }
   sed -i -r -e 's/^([^#]*'$match'.*)$/#\1/' "$path"
}

# WARN: gem_install is provided by RVM and it takes precedence! therefore this is install_gem
install_gem() {
   while [ -n "$1" ]; do
     if ! gem list "$1" | grep -q -e "^$1 "; then
       gem install "$1" || { print_error "install_gem: can't install gem"; return 1; }
     else
       print_info "already"
     fi
     shift
   done
}

rpm_is_installed() {
   for i in `rpm -q "$1"`; do
      version="${i##$1}"
      if echo "$version" | egrep -q -e "^-[0-9]"; then
        return 0
      fi
   done
   return 1
}

only_user() {
   if [ "$USER" != "$1" ]; then
      fail "only user '$1' can run the blebook, you are $USER"
   fi
}

prepend_line() {
   local line="$1"
   local path="$2"
   quiet head -n 1 "$path" || { print_error "prepend_line: can't read file '$path'"; return 1; }
   if [ "` head -n 1 "$path" `" != "$line" ]; then
     sed -i "1i $line" "$path" || { print_error "prepend_line: can't edit file '$path'"; return 1; }
   else
     print_info "already"
   fi
}

remove_line_matching() {
   local match="$1"
   local path="$2"
   [ ! -f "$path" ] && { print_error "remove_line_matching: file '$path' not found"; return 1; }
   sed -i "\\$line\\d" "$path" || { print_error "remove_line_matching: can't edit file '$path'"; return 1; }
}

replace_matching() {
   local match="$1"
   local replace="$2"
   local path="$3"
   [ ! -f "$path" ] && { print_error "replace_matching: file '$path' not found"; return 1; }
   sed -i "s\\$match\\$replace\\g" "$path"
}

replace_line_matching() {
   local match="$1"
   local replace="$2"
   local path="$3"
   [ ! -f "$path" ] && { print_error "replace_line_matching: file '$path' not found"; return 1; }
   sed -i "s\\.*$match.*\\$replace\\g" "$path"
}

symlink() {
  local src=$1
  local dest=$2
  if test -L "$2"; then
    local curr="`readlink "$2"`"
    if [ "$curr" != "$1" ]; then
       print_error "symlink exists already, but points to different location: $curr (should $2)"
       return 1
    fi
    print_info "already"
  else
    ln -s "$1" "$2" || { print_error "can't create symlink"; return 1; }
  fi
}

timeout() {
   local time=$1; shift
   preserveEnvironment
   if ! /usr/bin/env timeout "$time" "${_BASHIBLE}" -- "$@"; then
      print_error "timeout expired"
      return 1
   fi
}

uncomment_line_matching() {
   local match="$1"
   local path="$2"
   [ ! -f "$path" ] && { print_error "uncomment_line_matching: file '$path' not found"; return 1; }
   sed -i -r -e 's/^ *#(.*?'$match'.*)$/\1/' "$path"
}

# wait_for_tcp 10.0.3.188:80 up
# wait_for_tcp 10.0.3.188:80 down
wait_for_tcp() {
  local what="$1"
  local up="$2"
  if [ "$up" = up ]; then
     while ! netstat -lnt | grep "$what" | grep -q 'LISTEN'; do sleep 1; done
  elif [ "$up" = down ]; then
     while netstat -lnt | grep "$what" | grep -q 'LISTEN'; do sleep 1; done
  else
     fail "wait for '$up'? (expected up|down)"
  fi
  return 0
}

yum_install() {
   while [ -n "$1" ]; do
     if ! rpm_is_installed "$1"; then
        print_info "$1 seems to be not installed yet"
        yum install -y "$1" || { print_error "yum_install: can't install $1"; return 1; }
     else
        print_info "$1 already"
     fi
     shift
   done
}


#### SETUP VARIABLES ####

_BASHIBLE=`readlink -e "$0"` # the bashible script itself
[ -z "${_BASHIBLE}" ] && fail "can't get _BASHIBLE; is readlink command present?"
_HOSTNAME=`hostname`
[ -z "${_HOSTNAME}" ] && fail "got no hostname"
_BLOCKS_STARTED=0     # zero before any block started
_SKIP=0               # skipping mode? reseted on next block
_BLEBOOK=''           # script to be executed
_BASE_DIR=''          # current base dir for blocks in a playbook
_ORIG_BASE_DIR=''     # orig base dir when a playbook has been called
_LEVEL=0              # >1 is a sub-blebook
_NAV=''               # navigation when calling sub-blebook(s)
_PRESERVED='PATH:TAGS:_CALLED:_IMPORTED:_NOTIFY:' # preserved env variables; _PRESERVED itself is not preserved, must be explicitly declared in every blebook
_ENVREPEAT=()         # used for copying preserved environment variables over sudo or a command

# when called internally to run a sudoed command
if [ "$1" = "--" ]; then

  shift

  # first re-import all imported files
  IFS=':'; for i in $_IMPORTED; do
     if [ -n "$i" ]; then
        source "$i" || fail "problem while re-importing $i"
     fi
  done
  IFS=$' \t\n'

  # finally run the command; environment variables are included in the command
  # (built by the preserveEnvironment)
  "$@"

# when a help is requested
elif [ "$1" = -h -o "$1" = --help ]; then

  help

# when a blebook passed as the first parameter
elif [ -n "$1" ]; then

  _IMPORTED=':'            # imported files (re-sourced after sudo)

  if quiet which tempfile; then
     _NOTIFY=`tempfile`    # will be called at the end
     _CALLED=`tempfile`    # already called playbooks
  else
     _NOTIFY=/tmp/bashible-$$.notify
     _CALLED=/tmp/bashible-$$.called
     touch "${_NOTIFY}" || fail "can't touch ${_NOTIFY}"
     touch "${_CALLED}" || fail "can't touch ${_CALLED}"
  fi

  # process the blebook (and pass extra parameters, too)
  call "$@"

  # at the end call notified commands
  _NAV='NOTIFIED'
  while read path ; do
    call "$path"
  done < "${_NOTIFY}"

  # cleanup
  rm "${_CALLED}"
  rm "${_NOTIFY}"

else

  help

fi
